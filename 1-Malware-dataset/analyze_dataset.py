"""Download the malware dataset and perform some graph analysis."""

import gdown
from pathlib import Path
import json
from networkx.readwrite import json_graph
import pprint
import networkx
from pyunpack import Archive

# Download dataset
url = 'https://drive.google.com/uc?id=1JRHBh_-hcuqxyniEb3lKkv97DLQP7qj3'
output = '1-Malware-dataset/malware.7z'
gdown.download(url, output, quiet=False)

# Extract from 7zip
target=Path("1-Malware-dataset/malware")
target.mkdir(parents=True, exist_ok=True)
print(f"Extracting dataset to {target}")
Archive(output).extractall(target)

# Find number of graphs
graph_files = list((target / "malware").rglob("*.json"))
print(f"Number of malicious provenance graphs in dataset: {len(graph_files)}.")

# Get some details about one particular graph
pick_graph = "1-Malware-dataset/malware/malware/00a1ef6d312b95ed67eb8f0fbad9d3583b55b9b98037ee17981651159c8b2d5e.json"
print(f"Analyzing graph {pick_graph}.")
with open(file = pick_graph, mode = "r", encoding = "UTF-8") as f:
    json_data = json.load(f)
graph: networkx.DiGraph = json_graph.tree_graph(json_data)
number_of_nodes = graph.number_of_nodes()
process_events = [id for (id, attrs) in graph.nodes(data=True) if ("event_type" in attrs and attrs["event_type"]=="si_create_process")]
file_events = [id for (id, attrs) in graph.nodes(data=True) if ("event_type" in attrs and attrs["event_type"]=="si_create_file")]
socket_events = [id for (id, attrs) in graph.nodes(data=True) if ("event_type" in attrs and attrs["event_type"]=="etw_tcp_send_ipv4")]
registry_events = [id for (id, attrs) in graph.nodes(data=True) if ("event_type" in attrs and attrs["event_type"]=="si_set_value_key")]
print(f"Number of behavior events in this graph: {number_of_nodes}.")
print(f"Number of process events in this graph: {len(process_events)}.")
print(f"Number of file events in this graph: {len(file_events)}.")
print(f"Number of file socket in this graph: {len(socket_events)}.")
print(f"Number of file registry in this graph: {len(registry_events)}.")

# Show details of one behavior event
node_id = "3066606657084.18251"
process_event_features = graph.nodes[node_id]
pp = pprint.PrettyPrinter(indent=4)
print(f"Showing features of process event with ID={node_id}:")
pp.pprint(process_event_features)
